[{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://tractortom.github.io/date4ts/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://tractortom.github.io/date4ts/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tanguy Barthelemy. Author, maintainer.","code":""},{"path":"https://tractortom.github.io/date4ts/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barthelemy T (2025). date4ts: Wrangle Modify Ts Object Classic Frequencies Exact Dates. R package version 0.1.1, https://github.com/TractorTom/date4ts.","code":"@Manual{,   title = {date4ts: Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates},   author = {Tanguy Barthelemy},   year = {2025},   note = {R package version 0.1.1},   url = {https://github.com/TractorTom/date4ts}, }"},{"path":"https://tractortom.github.io/date4ts/index.html","id":"date4ts-","dir":"","previous_headings":"","what":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"date4ts est une boite à outils pour la manipulation des objets ts en R. La motivation pour la création de ce package est le fait que pour créer un objet ts en R, il faut préciser la date sous le format AAAAPPAAAA PP (avec AAAAAAAA l’année en 4 chiffres et PPPP le numéro de la période). Par exemple, pour désigner le mois de septembre 2024, utilise c(2024, 9) et pour désigner le mois de janvier 2025 peut écrire c(2025, 1) ou 2025. Mais peut aussi utiliser le time-units (AAAA+PP/fAAAA + PP / f avec ff la fréquence). L’idée est d’uniformiser les dates avec un ensemble de fonction de conversion, de formattage mais aussi de modification des ts.","code":""},{"path":"https://tractortom.github.io/date4ts/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"can install development version date4ts GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"TractorTom/date4ts\")"},{"path":"https://tractortom.github.io/date4ts/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"","code":"library(\"date4ts\")"},{"path":"https://tractortom.github.io/date4ts/index.html","id":"converting-dates","dir":"","previous_headings":"Usage","what":"Converting Dates","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"Convert date TimeUnits format date_ts format: Convert monthly date quarterly date:","code":"as_yyyytt(2019.75) # 4th quarter 2019 #> [1] 2019    4 as_yyyytt(2020) # 1st quarter 2020 #> [1] 2020    1 as_yyyytt(2022 + 1 / 4) # 2nd quarter 2022 #> [1] 2022    2 trim2mens(c(2019L, 4L)) # 4th quarter 2019 -> October 2019 #> [1] 2019   10 mens2trim(c(2020L, 11L)) # November 2020 -> 4th quarter 2020 #> [1] 2020    4"},{"path":"https://tractortom.github.io/date4ts/index.html","id":"manipulating-dates","dir":"","previous_headings":"Usage","what":"Manipulating Dates","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"Get previous date: Get next date: Find first non-NA date time series:","code":"previous_date_ts(c(2020L, 4L), frequency_ts = 4L, lag = 2L) #> [1] 2020    2 next_date_ts(c(2020L, 4L), frequency_ts = 4L, lag = 2L) #> [1] 2021    2 ts1 <- ts(c(NA, NA, NA, 1:10, NA), start = 2000, frequency = 12L) first_date(ts1) #> [1] 2000    4"},{"path":"https://tractortom.github.io/date4ts/index.html","id":"data-retrieval-and-modification","dir":"","previous_headings":"Usage","what":"Data Retrieval and Modification","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"Retrieve values time series: Set values time series: Combine two time series: Extend time series new values:","code":"ts1 <- ts(1:100, start = 2012L, frequency = 12L) get_value_ts(series = ts1, date_from = c(2015L, 7L), date_to = c(2018L, 6L)) #>  [1] 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #> [26] 68 69 70 71 72 73 74 75 76 77 78 set_value_ts(series = ev_pib, date_ts = c(2021L, 2L), replacement = c(1, 2, 3)) #>               Qtr1          Qtr2          Qtr3          Qtr4 #> 1970            NA            NA            NA            NA #> 1971            NA            NA            NA            NA #> 1972            NA            NA            NA            NA #> 1973            NA            NA            NA            NA #> 1974            NA            NA            NA            NA #> 1975            NA            NA            NA            NA #> 1976            NA            NA            NA            NA #> 1977            NA            NA            NA            NA #> 1978            NA            NA            NA            NA #> 1979            NA            NA            NA            NA #> 1980            NA  -0.552712174  -0.086754850  -0.130764175 #> 1981   0.436797694   0.663555818   0.655755678   0.465977515 #> 1982   0.892058545   0.662204954   0.047370440   0.507157219 #> 1983   0.581233329  -0.042548981   0.077874681   0.583935348 #> 1984   0.619554314   0.363253711   0.462243113   0.288218891 #> 1985   0.123719710   0.631349292   0.756575266   0.327524429 #> 1986   0.357772133   1.122129272   0.326669036   0.370966439 #> 1987   0.251659155   1.144598588   0.680758053   1.694026185 #> 1988   1.231391234   0.593185145   1.302640709   1.065361026 #> 1989   1.260037978   0.825806743   1.075064005   1.523944130 #> 1990   0.517826385   0.377746880   0.459923112   0.366254003 #> 1991  -0.156699858   0.309591699   0.289346425   0.496079715 #> 1992   0.967856839  -0.057920191   0.028450027  -0.223321860 #> 1993  -0.556650909   0.039547303   0.133452547   0.269728893 #> 1994   0.725093411   1.095551160   0.539244435   0.886607198 #> 1995   0.569503181   0.478767111   0.081524147   0.164939274 #> 1996   0.631394447   0.165893251   0.621382576   0.125750143 #> 1997   0.302664793   1.148738446   0.785645124   1.092788520 #> 1998   0.838700519   0.933602781   0.685747514   0.764421531 #> 1999   0.504428016   0.825984551   1.222733930   1.401265205 #> 2000   0.909693692   0.987402187   0.624501289   0.812645817 #> 2001   0.547797973   0.184046964   0.272336544   0.026816438 #> 2002   0.372541324   0.461330701   0.418587141  -0.054011578 #> 2003   0.203235664  -0.218262571   0.676991816   0.717703853 #> 2004   0.939180093   0.645697044   0.258638250   0.744155119 #> 2005   0.269714193   0.198490900   0.500009124   0.776948575 #> 2006   0.754542470   1.015941519   0.013572258   0.786297420 #> 2007   0.740940215   0.773456477   0.351755993   0.225637214 #> 2008   0.395791727  -0.412315400  -0.280602493  -1.467532567 #> 2009  -1.632375943  -0.101454578   0.160750061   0.695136221 #> 2010   0.368232308   0.507493101   0.645610703   0.704301595 #> 2011   0.997901680   0.027941934   0.367134262   0.173618343 #> 2012   0.093557392  -0.157293866   0.191962538  -0.077204189 #> 2013  -0.001133455   0.655711072   0.012011561   0.475525630 #> 2014   0.084980333   0.118498226   0.504372721   0.081229345 #> 2015   0.489945372   0.007744848   0.332080732   0.139118865 #> 2016   0.636268205  -0.161024723   0.198728721   0.544690904 #> 2017   0.816780164   0.820053915   0.622880698   0.828202860 #> 2018   0.048700300   0.382559370   0.366396552   0.701164421 #> 2019   0.665798334   0.604099134   0.011971808  -0.400152537 #> 2020  -5.647477753 -13.443145590  18.555378962  -1.118046566 #> 2021   0.156198162   1.000000000   2.000000000   3.000000000 #> 2022  -0.047254400            NA            NA trim_1 <- stats::ts(rep(1, 4), start = 2021, frequency = 4L) combine2ts(ev_pib, trim_1) #>               Qtr1          Qtr2          Qtr3          Qtr4 #> 1970            NA            NA            NA            NA #> 1971            NA            NA            NA            NA #> 1972            NA            NA            NA            NA #> 1973            NA            NA            NA            NA #> 1974            NA            NA            NA            NA #> 1975            NA            NA            NA            NA #> 1976            NA            NA            NA            NA #> 1977            NA            NA            NA            NA #> 1978            NA            NA            NA            NA #> 1979            NA            NA            NA            NA #> 1980            NA  -0.552712174  -0.086754850  -0.130764175 #> 1981   0.436797694   0.663555818   0.655755678   0.465977515 #> 1982   0.892058545   0.662204954   0.047370440   0.507157219 #> 1983   0.581233329  -0.042548981   0.077874681   0.583935348 #> 1984   0.619554314   0.363253711   0.462243113   0.288218891 #> 1985   0.123719710   0.631349292   0.756575266   0.327524429 #> 1986   0.357772133   1.122129272   0.326669036   0.370966439 #> 1987   0.251659155   1.144598588   0.680758053   1.694026185 #> 1988   1.231391234   0.593185145   1.302640709   1.065361026 #> 1989   1.260037978   0.825806743   1.075064005   1.523944130 #> 1990   0.517826385   0.377746880   0.459923112   0.366254003 #> 1991  -0.156699858   0.309591699   0.289346425   0.496079715 #> 1992   0.967856839  -0.057920191   0.028450027  -0.223321860 #> 1993  -0.556650909   0.039547303   0.133452547   0.269728893 #> 1994   0.725093411   1.095551160   0.539244435   0.886607198 #> 1995   0.569503181   0.478767111   0.081524147   0.164939274 #> 1996   0.631394447   0.165893251   0.621382576   0.125750143 #> 1997   0.302664793   1.148738446   0.785645124   1.092788520 #> 1998   0.838700519   0.933602781   0.685747514   0.764421531 #> 1999   0.504428016   0.825984551   1.222733930   1.401265205 #> 2000   0.909693692   0.987402187   0.624501289   0.812645817 #> 2001   0.547797973   0.184046964   0.272336544   0.026816438 #> 2002   0.372541324   0.461330701   0.418587141  -0.054011578 #> 2003   0.203235664  -0.218262571   0.676991816   0.717703853 #> 2004   0.939180093   0.645697044   0.258638250   0.744155119 #> 2005   0.269714193   0.198490900   0.500009124   0.776948575 #> 2006   0.754542470   1.015941519   0.013572258   0.786297420 #> 2007   0.740940215   0.773456477   0.351755993   0.225637214 #> 2008   0.395791727  -0.412315400  -0.280602493  -1.467532567 #> 2009  -1.632375943  -0.101454578   0.160750061   0.695136221 #> 2010   0.368232308   0.507493101   0.645610703   0.704301595 #> 2011   0.997901680   0.027941934   0.367134262   0.173618343 #> 2012   0.093557392  -0.157293866   0.191962538  -0.077204189 #> 2013  -0.001133455   0.655711072   0.012011561   0.475525630 #> 2014   0.084980333   0.118498226   0.504372721   0.081229345 #> 2015   0.489945372   0.007744848   0.332080732   0.139118865 #> 2016   0.636268205  -0.161024723   0.198728721   0.544690904 #> 2017   0.816780164   0.820053915   0.622880698   0.828202860 #> 2018   0.048700300   0.382559370   0.366396552   0.701164421 #> 2019   0.665798334   0.604099134   0.011971808  -0.400152537 #> 2020  -5.647477753 -13.443145590  18.555378962  -1.118046566 #> 2021   1.000000000   1.000000000   1.000000000   1.000000000 #> 2022  -0.047254400            NA            NA ts1 <- ts(data = c(rep(NA_integer_, 3L), 1L:10L, rep(NA_integer_, 3L)), start = 2020, frequency = 12L) x <- rep(3L, 2L) extend_ts(series = ts1, replacement = x) #> Warning: extending time series when replacing values #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 2020  NA  NA  NA   1   2   3   4   5   6   7   8   9 #> 2021  10   3   3"},{"path":"https://tractortom.github.io/date4ts/index.html","id":"formatting-and-labels","dir":"","previous_headings":"Usage","what":"Formatting and Labels","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"Normalize date: Generate labels period:","code":"normalize_date_ts(c(2020L, 0L), frequency_ts = 4L) # 4th quarter of 2019 #> Warning in assert_date_ts(x = date_ts, frequency_ts, add = coll, .var.name = #> \"date_ts\"): Assertion on 'period' failed: Element 1 is not >= 1. #> [1] 2019    4 normalize_date_ts(c(2020L, 0L), frequency_ts = 4L, test = FALSE) # 4th quarter of 2019 #> [1] 2019    4 libelles(date_ts = c(2019L, 10L), frequency_ts = 12L, n = 9L) #> [1] \"Oct 2019\" \"Nov 2019\" \"Dec 2019\" \"Jan 2020\" \"Feb 2020\" \"Mar 2020\" \"Apr 2020\" #> [8] \"May 2020\" \"Jun 2020\""},{"path":"https://tractortom.github.io/date4ts/index.html","id":"data-information","dir":"","previous_headings":"Usage","what":"Data Information","title":"Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates","text":"Evolution French GDP Q1 2022:","code":"ev_pib #>               Qtr1          Qtr2          Qtr3          Qtr4 #> 1970            NA            NA            NA            NA #> 1971            NA            NA            NA            NA #> 1972            NA            NA            NA            NA #> 1973            NA            NA            NA            NA #> 1974            NA            NA            NA            NA #> 1975            NA            NA            NA            NA #> 1976            NA            NA            NA            NA #> 1977            NA            NA            NA            NA #> 1978            NA            NA            NA            NA #> 1979            NA            NA            NA            NA #> 1980            NA  -0.552712174  -0.086754850  -0.130764175 #> 1981   0.436797694   0.663555818   0.655755678   0.465977515 #> 1982   0.892058545   0.662204954   0.047370440   0.507157219 #> 1983   0.581233329  -0.042548981   0.077874681   0.583935348 #> 1984   0.619554314   0.363253711   0.462243113   0.288218891 #> 1985   0.123719710   0.631349292   0.756575266   0.327524429 #> 1986   0.357772133   1.122129272   0.326669036   0.370966439 #> 1987   0.251659155   1.144598588   0.680758053   1.694026185 #> 1988   1.231391234   0.593185145   1.302640709   1.065361026 #> 1989   1.260037978   0.825806743   1.075064005   1.523944130 #> 1990   0.517826385   0.377746880   0.459923112   0.366254003 #> 1991  -0.156699858   0.309591699   0.289346425   0.496079715 #> 1992   0.967856839  -0.057920191   0.028450027  -0.223321860 #> 1993  -0.556650909   0.039547303   0.133452547   0.269728893 #> 1994   0.725093411   1.095551160   0.539244435   0.886607198 #> 1995   0.569503181   0.478767111   0.081524147   0.164939274 #> 1996   0.631394447   0.165893251   0.621382576   0.125750143 #> 1997   0.302664793   1.148738446   0.785645124   1.092788520 #> 1998   0.838700519   0.933602781   0.685747514   0.764421531 #> 1999   0.504428016   0.825984551   1.222733930   1.401265205 #> 2000   0.909693692   0.987402187   0.624501289   0.812645817 #> 2001   0.547797973   0.184046964   0.272336544   0.026816438 #> 2002   0.372541324   0.461330701   0.418587141  -0.054011578 #> 2003   0.203235664  -0.218262571   0.676991816   0.717703853 #> 2004   0.939180093   0.645697044   0.258638250   0.744155119 #> 2005   0.269714193   0.198490900   0.500009124   0.776948575 #> 2006   0.754542470   1.015941519   0.013572258   0.786297420 #> 2007   0.740940215   0.773456477   0.351755993   0.225637214 #> 2008   0.395791727  -0.412315400  -0.280602493  -1.467532567 #> 2009  -1.632375943  -0.101454578   0.160750061   0.695136221 #> 2010   0.368232308   0.507493101   0.645610703   0.704301595 #> 2011   0.997901680   0.027941934   0.367134262   0.173618343 #> 2012   0.093557392  -0.157293866   0.191962538  -0.077204189 #> 2013  -0.001133455   0.655711072   0.012011561   0.475525630 #> 2014   0.084980333   0.118498226   0.504372721   0.081229345 #> 2015   0.489945372   0.007744848   0.332080732   0.139118865 #> 2016   0.636268205  -0.161024723   0.198728721   0.544690904 #> 2017   0.816780164   0.820053915   0.622880698   0.828202860 #> 2018   0.048700300   0.382559370   0.366396552   0.701164421 #> 2019   0.665798334   0.604099134   0.011971808  -0.400152537 #> 2020  -5.647477753 -13.443145590  18.555378962  -1.118046566 #> 2021   0.156198162   1.460529708   3.017719839   0.779781860 #> 2022  -0.047254400            NA            NA"},{"path":"https://tractortom.github.io/date4ts/reference/as_yyyytt.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion au format date_ts — as_yyyytt","title":"Conversion au format date_ts — as_yyyytt","text":"Les fonctions as_yyyytt et as_yyyymm convertissent une date du format TimeUnits au format date_ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/as_yyyytt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion au format date_ts — as_yyyytt","text":"","code":"as_yyyytt(timeunits)  as_yyyymm(timeunits)"},{"path":"https://tractortom.github.io/date4ts/reference/as_yyyytt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion au format date_ts — as_yyyytt","text":"timeunits une date en année (Par exemple 2015.25 pour le 2ème trimestre 2015 ou 2021.83333333333 pour novembre 2021)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/as_yyyytt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion au format date_ts — as_yyyytt","text":"En sortie, ces fonctions retournent la date au format date_ts (c'est-à-dire un vecteur d'entiers de la forme AAAA, c(AAAA, MM) ou c(AAAA, TT))","code":""},{"path":"https://tractortom.github.io/date4ts/reference/as_yyyytt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion au format date_ts — as_yyyytt","text":"La fonction as_yyyytt retourne la date par trimestre et la fonction as_yyyymm retourne la date par mois.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/as_yyyytt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion au format date_ts — as_yyyytt","text":"","code":"as_yyyytt(2019.75) # 4ème trimestre 2019 #> [1] 2019    4 as_yyyytt(2020) # 1er trimestre 2020 #> [1] 2020    1 as_yyyytt(2022 + 1 / 4) # 2ème trimestre 2022 #> [1] 2022    2  as_yyyymm(2019.75) # Octobre 2019 #> [1] 2019   10 as_yyyymm(2020) # Janvier 2020 #> [1] 2020    1 as_yyyymm(2020 + 1 / 12) # Février 2020 #> [1] 2020    2 as_yyyymm(2020 + 12 / 12) # Janvier 2021 #> [1] 2021    1"},{"path":"https://tractortom.github.io/date4ts/reference/check_date_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie le format de date — check_date_ts","title":"Vérifie le format de date — check_date_ts","text":"La fonction assert_date_ts vérifie qu'un objet est de type AAAA, c(AAAA, MM) ou c(AAAA, TT)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_date_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie le format de date — check_date_ts","text":"","code":"check_date_ts(x, frequency_ts, .var.name = checkmate::vname(x), warn = TRUE)  assert_date_ts(   x,   frequency_ts,   add = NULL,   .var.name = checkmate::vname(x),   warn = TRUE )"},{"path":"https://tractortom.github.io/date4ts/reference/check_date_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie le format de date — check_date_ts","text":"x un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. .var.name Nom de l'objet à vérifier pour afficher dans les messages warn un booleen add Collection pour stocker les messages d'erreurs (Default NULL)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_date_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie le format de date — check_date_ts","text":"En sortie la fonction retourne l'objet x de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_date_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie le format de date — check_date_ts","text":"Les fonctions du package date4ts sont faites pour fonctionner avec des times-series de fréquence mensuelle ou trimestrielle et basés sur le système des mois, trimestres et années classiques. cherche donc à favoriser l'utilisation de vecteur c(AAAA, MM) pour désigner la date choisie. Lorsque l'objet x en entrée est au mauvais format, il est corrigé pendant la vérification et l'objet en sortie est au bon format. Si l'argument warn est FALSE, alors la fonction ne retournera pas de warning lors de l'évaluation. Ici, l'argument frequency_ts est nécessaire car une date sous la forme c(AAAA, PP), avec PP le nombre de période, ne désigne pas une date absolue. Par exemple, c(2020L 5L) désigne mai 2020 pour une fréquence mensuelle et le 1er trimestre 2021 pour une fréquence trimestrielle. Selon le préfixe de la fonction : si le check réussi : la fonction assert_date_ts retourne l'objet x de manière invisible; la fonction check_date_ts retourne le booléen TRUE. si le check échoue : la fonction assert_date_ts retourne un message d'erreur; la fonction check_date_ts retourne une chaîne de caractère signalant le problème.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_date_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie le format de date — check_date_ts","text":"","code":"# De bons formats de date assert_date_ts(c(2020L, 8L), frequency_ts = 12L) assert_date_ts(c(2020L, 2L), frequency_ts = 4L) check_date_ts(2022L, frequency_ts = 12L) #> [1] TRUE  # Format double --> génération d'un warning assert_date_ts(c(2020., 4.0), frequency_ts = 4L) #> Warning: Assertion on 'c(2020, 4)' failed: Must be of type 'integer', not 'double'. assert_date_ts(2022., frequency_ts = 12L) #> Warning: Assertion on '2022' failed: Must be of type 'integer', not 'double'. check_date_ts(2022., frequency_ts = 12L) #> Warning: Assertion on '2022' failed: Must be of type 'integer', not 'double'. #> [1] TRUE  # Fréquence au format double --> génération d'un warning assert_date_ts(c(2020L, 6L), frequency_ts = 4.0) #> Warning: Assertion on 'frequency_ts' failed: Must be of type 'integer', not 'double'. #> Warning: Assertion on 'period' failed: Element 1 is not <= 4. assert_date_ts(c(2020L, 42L), frequency_ts = 12.0) #> Warning: Assertion on 'frequency_ts' failed: Must be of type 'integer', not 'double'. #> Warning: Assertion on 'period' failed: Element 1 is not <= 12.  # Dépassement la fréquence --> génération d'un warning assert_date_ts(c(2020L, 6L), frequency_ts = 4L) #> Warning: Assertion on 'period' failed: Element 1 is not <= 4. assert_date_ts(c(2020L, 42L), frequency_ts = 12L) #> Warning: Assertion on 'period' failed: Element 1 is not <= 12. assert_date_ts(c(2020L, -4L), frequency_ts = 12L) #> Warning: Assertion on 'period' failed: Element 1 is not >= 1.  # Avec des erreurs check_date_ts(1:10, frequency_ts = 12L) #> [1] \"* 1:10 Must have length <= 2, but has length 10\""},{"path":"https://tractortom.github.io/date4ts/reference/check_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie la conformité d'une expression — check_expression","title":"Vérifie la conformité d'une expression — check_expression","text":"Vérifie la conformité d'une expression","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie la conformité d'une expression — check_expression","text":"","code":"check_expression(expr)  assert_expression(expr)"},{"path":"https://tractortom.github.io/date4ts/reference/check_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie la conformité d'une expression — check_expression","text":"expr une expression à évaluer","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie la conformité d'une expression — check_expression","text":"En sortie la fonction retourne l'objet x (le résultat de l'évaluation de l'expression expr) de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_expression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie la conformité d'une expression — check_expression","text":"La fonction évalue l'expression expr. Le check vérifie si la fonction génère une erreur ou un warning. Si elle ne génère aucun message particulier, retourne alors l'objet x (le résultat de l'évaluation de l'expression expr), sans erreur. Selon le préfixe de la fonction : si le check réussi : la fonction assert_expression retourne l'objet x de manière invisible; la fonction check_expression retourne le booléen TRUE. si le check échoue : la fonction assert_expression retourne un message d'erreur; la fonction check_expression retourne la chaîne de caractère \"Invalid expression\".","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie la conformité d'une expression — check_expression","text":"","code":"assert_expression(expr = {2 + 2}) assert_expression(expr = {is.integer(1L)}) try(assert_expression(expr = {log(\"a\")}), silent = TRUE)  check_expression(expr = {2 + 2}) #> [1] TRUE check_expression(expr = {is.integer(1L)}) #> [1] TRUE check_expression(expr = {log(\"a\")}) #> [1] \"Invalid expression : {\"              \"Invalid expression :     log(\\\"a\\\")\" #> [3] \"Invalid expression : }\""},{"path":"https://tractortom.github.io/date4ts/reference/check_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie la conformité d'une fréquence — check_frequency","title":"Vérifie la conformité d'une fréquence — check_frequency","text":"Vérifie la conformité d'une fréquence","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie la conformité d'une fréquence — check_frequency","text":"","code":"check_frequency(x, .var.name = checkmate::vname(x), warn = TRUE)  assert_frequency(x, add = NULL, .var.name = checkmate::vname(x), warn = TRUE)"},{"path":"https://tractortom.github.io/date4ts/reference/check_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie la conformité d'une fréquence — check_frequency","text":"x un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. .var.name Nom de l'objet à vérifier pour afficher dans les messages warn un booleen add Collection pour stocker les messages d'erreurs (Default NULL)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie la conformité d'une fréquence — check_frequency","text":"En sortie la fonction retourne l'objet x de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_frequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie la conformité d'une fréquence — check_frequency","text":"La fréquence d'une série temporelle est soit mensuelle (12L ou 12.0) soit trimestrielle (4L ou 4.0). Les autres fréquences ne sont pas acceptées. Cette fonction s'appuie essentiellement sur les fonctions checkmate::check_numeric, checkmate::check_int et checkmate::check_choice. Il y néanmoins une petite subtilité : vérifie si l'objet x est de type double ou integer. Dans le premier cas, affichera un warning et corrigera l'objet au format integer pour les traitements ultérieurs. En sortie, x est retourné de manière invisible. Si l'argument warn est FALSE, alors la fonction ne retournera pas de warning lors de l'évaluation. Selon le préfixe de la fonction : si le check réussi : la fonction assert_frequency retourne l'objet x de manière invisible; la fonction check_frequency retourne le booléen TRUE. si le check échoue : la fonction assert_frequency retourne un message d'erreur; la fonction check_frequency retourne une chaîne de caractère signalant le problème.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie la conformité d'une fréquence — check_frequency","text":"","code":"assert_frequency(4L) assert_frequency(12L)  check_frequency(4L) #> [1] TRUE check_frequency(12L) #> [1] TRUE  # Avec des erreurs,  check_frequency(Inf, warn = FALSE) #> [1] \"* Inf Must be finite\" check_frequency(1:10) #> [1] \"* 1:10 Must have length 1 \\n * 1:10 Must be element of set {'4','12'}, but is not atomic scalar\" check_frequency(1L) #> [1] \"* 1L Must be element of set {'4','12'}, but is '1'\""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie la conformité d'une date scalaire — check_scalar_date","title":"Vérifie la conformité d'une date scalaire — check_scalar_date","text":"Vérifie la conformité d'une date scalaire","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie la conformité d'une date scalaire — check_scalar_date","text":"","code":"check_scalar_date(x)  assert_scalar_date(x, add = NULL, .var.name = checkmate::vname(x))"},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie la conformité d'une date scalaire — check_scalar_date","text":"x un objet de type Date. add Collection pour stocker les messages d'erreurs (Default NULL) .var.name Nom de l'objet à vérifier pour afficher dans les messages","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie la conformité d'une date scalaire — check_scalar_date","text":"En sortie la fonction retourne l'objet x de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie la conformité d'une date scalaire — check_scalar_date","text":"vérifie que l'objet x en entrée est bien au format Date et qu'il s'agit d'un scalaire (vecteur de taille 1). Cette fonction s'appuie essentiellement sur la fonction checkmate::assert_date. Selon le préfixe de la fonction : si le check réussi : la fonction assert_scalar_date retourne l'objet x de manière invisible; la fonction check_scalar_date retourne le booléen TRUE. si le check échoue : la fonction assert_scalar_date retourne un message d'erreur; la fonction check_scalar_date retourne la chaîne de caractère correspondante à l'erreur du check.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie la conformité d'une date scalaire — check_scalar_date","text":"","code":"assert_scalar_date(as.Date(\"2018-01-24\")) assert_scalar_date(as.Date(\"2000-02-29\")) assert_scalar_date(Sys.Date())  check_scalar_date(as.Date(\"2018-01-24\")) #> [1] \"TRUE\" check_scalar_date(as.Date(\"2000-02-29\")) #> [1] \"TRUE\" check_scalar_date(Sys.Date()) #> [1] \"TRUE\"  # Avec des erreurs  check_scalar_date(2L) #> [1] \"Must be of class 'Date', not 'integer'\" check_scalar_date(seq(from = as.Date(\"2000-01-01\"), to = Sys.Date(), by = \"year\")) #> [1] \"Must have length 1\""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie la conformité d'un entier scalaire — check_scalar_integer","title":"Vérifie la conformité d'un entier scalaire — check_scalar_integer","text":"Vérifie la conformité d'un entier scalaire","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie la conformité d'un entier scalaire — check_scalar_integer","text":"","code":"check_scalar_integer(x, warn = TRUE)  assert_scalar_integer(   x,   add = NULL,   .var.name = checkmate::vname(x),   warn = TRUE )"},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie la conformité d'un entier scalaire — check_scalar_integer","text":"x un entier relatif (positif, négatif ou nul) warn un booleen add Collection pour stocker les messages d'erreurs (Default NULL) .var.name Nom de l'objet à vérifier pour afficher dans les messages","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie la conformité d'un entier scalaire — check_scalar_integer","text":"En sortie la fonction retourne l'objet x de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie la conformité d'un entier scalaire — check_scalar_integer","text":"vérifie que l'objet x en entrée est bien un entier. Cette fonction s'appuie essentiellement sur la fonction checkmate::assert_int. Il y néanmoins une petite subtilité : vérifie si l'objet x est de type double ou integer. Si l'objet est de type double (et non integer), la fonction retournera aussi un warning. Dans le premier cas, affichera un warning et corrigera l'objet au format integer pour les traitements ultérieurs. En sortie, x est retourné de manière invisible. Si l'argument warn vaut FALSE, alors la fonction ne retournera pas de warning lors de l'évaluation. Selon le préfixe de la fonction : si le check réussi : la fonction assert_scalar_integer retourne l'objet x de manière invisible; la fonction check_scalar_integer retourne le booléen TRUE. si le check échoue : la fonction assert_scalar_integer retourne un message d'erreur; la fonction check_scalar_integer retourne une chaîne de caractère signalant le problème.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie la conformité d'un entier scalaire — check_scalar_integer","text":"","code":"assert_scalar_integer(1L) assert_scalar_integer(100L) assert_scalar_integer(-4L) assert_scalar_integer(0L)  check_scalar_integer(1L) #> [1] TRUE check_scalar_integer(100L) #> [1] TRUE check_scalar_integer(-4L) #> [1] TRUE check_scalar_integer(0L) #> [1] TRUE  # Avec des erreurs,  check_scalar_integer(Inf) #> [1] \"* x Must be of type 'single integerish value', not 'double'\" check_scalar_integer(1:10) #> [1] \"* x Must have length 1\" check_scalar_integer(pi) #> [1] \"* x Must be of type 'single integerish value', not 'double'\" check_scalar_integer(2.) #> Warning: Assertion on 'x' failed: Must be of type 'integer', not 'double'. #> [1] TRUE"},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_natural.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie la conformité d'un entier naturel — check_scalar_natural","title":"Vérifie la conformité d'un entier naturel — check_scalar_natural","text":"Le de cett fonction est de tester si une variable x est un nombre naturel strictement positif.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_natural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie la conformité d'un entier naturel — check_scalar_natural","text":"","code":"check_scalar_natural(x, warn = TRUE)  assert_scalar_natural(   x,   add = NULL,   .var.name = checkmate::vname(x),   warn = TRUE )"},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_natural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie la conformité d'un entier naturel — check_scalar_natural","text":"x un entier naturel strictement positif warn un booleen add Collection pour stocker les messages d'erreurs (Default NULL) .var.name Nom de l'objet à vérifier pour afficher dans les messages","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_natural.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie la conformité d'un entier naturel — check_scalar_natural","text":"En sortie la fonction retourne l'objet x de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_natural.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie la conformité d'un entier naturel — check_scalar_natural","text":"Cette fonction s'appuie essentiellement sur la fonction checkmate::assert_count. Il y néanmoins une petite subtilité : vérifie si l'objet x est de type double ou integer. Dans le premier cas, affichera un warning et corrigera l'objet au format integer pour les traitements ultérieurs. En sortie, x est retourné de manière invisible. Si l'argument warn est FALSE, alors la fonction ne retournera pas de warning lors de l'évaluation. Selon le préfixe de la fonction : si le check réussi : la fonction assert_scalar_natural retourne l'objet x de manière invisible; la fonction check_scalar_natural retourne le booléen TRUE. si le check échoue : la fonction assert_scalar_natural retourne un message d'erreur; la fonction check_scalar_natural retourne une chaîne de caractère signalant le problème.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/reference/check_scalar_natural.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie la conformité d'un entier naturel — check_scalar_natural","text":"","code":"# Avec des entier integer assert_scalar_natural(1L) assert_scalar_natural(100L)  # Avec des entiers double assert_scalar_natural(2.) #> Warning: Assertion on '2' failed: Must be of type 'integer', not 'double'. assert_scalar_natural(457) #> Warning: Assertion on '457' failed: Must be of type 'integer', not 'double'."},{"path":"https://tractortom.github.io/date4ts/reference/check_timeunits.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie la conformité d'un objet TimeUnits — check_timeunits","title":"Vérifie la conformité d'un objet TimeUnits — check_timeunits","text":"La fonction assert_timeunits vérifie qu'un objet est un TimeUnits.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_timeunits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie la conformité d'un objet TimeUnits — check_timeunits","text":"","code":"check_timeunits(x, frequency_ts, .var.name = checkmate::vname(x))  assert_timeunits(x, frequency_ts, add = NULL, .var.name = checkmate::vname(x))"},{"path":"https://tractortom.github.io/date4ts/reference/check_timeunits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie la conformité d'un objet TimeUnits — check_timeunits","text":"x un numérique qui représente le time units de frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. .var.name Nom de l'objet à vérifier pour afficher dans les messages add Collection pour stocker les messages d'erreurs (Default NULL)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_timeunits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie la conformité d'un objet TimeUnits — check_timeunits","text":"En sortie la fonction retourne l'objet x de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_timeunits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie la conformité d'un objet TimeUnits — check_timeunits","text":"Un objet de type TimeUnits est un numérique qui désigne l'année et la période en cours avec ses décimales. Ainsi pour une série temporelle mensuelle, 2020.5 représente la moitié de l'année donc juillet 2020 et s'écrit c(2020L, 7L) au format date_ts. Selon le préfixe de la fonction : si le check réussi : la fonction assert_timeunits retourne l'objet x de manière invisible; la fonction check_timeunits retourne le booléen TRUE. si le check échoue : la fonction assert_timeunits retourne un message d'erreur; la fonction check_timeunits retourne une chaîne de caractère signalant le problème.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_timeunits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie la conformité d'un objet TimeUnits — check_timeunits","text":"","code":"assert_timeunits(2020.5, frequency_ts = 12L) assert_timeunits(2020.5, frequency_ts = 4L) assert_timeunits(2023., frequency_ts = 12L)  assert_timeunits(2000. + 5. / 12.0, frequency_ts = 12L) assert_timeunits(2015. + 3. / 4.0, frequency_ts = 4L)  check_timeunits(2020.5, frequency_ts = 12L) #> [1] TRUE check_timeunits(2015. + 3. / 4.0, frequency_ts = 4L) #> [1] TRUE  # Avec erreur  check_timeunits(list(1.), frequency_ts = 12L) #> [1] \"* list(1) Must be of type 'number', not 'list'\" check_timeunits(2000., frequency_ts = 1L) #> [1] \"* frequency_ts Must be element of set {'4','12'}, but is '1'\""},{"path":"https://tractortom.github.io/date4ts/reference/check_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie la conformité d'un objet ts — check_ts","title":"Vérifie la conformité d'un objet ts — check_ts","text":"Les fonctions assert_ts et check_ts vérifient qu'un objet ts est bien conforme.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie la conformité d'un objet ts — check_ts","text":"","code":"check_ts(x, .var.name = checkmate::vname(x), allow_mts = FALSE)  assert_ts(x, add = NULL, .var.name = checkmate::vname(x), allow_mts = FALSE)"},{"path":"https://tractortom.github.io/date4ts/reference/check_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie la conformité d'un objet ts — check_ts","text":"x Un objet ts unidimensionnel .var.name Nom de l'objet à vérifier pour afficher dans les messages allow_mts Booleen. Est ce que les objects mts sont acceptés ? add Collection pour stocker les messages d'erreurs (Default NULL)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie la conformité d'un objet ts — check_ts","text":"En sortie la fonction retourne l'objet x de manière invisible ou une erreur.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vérifie la conformité d'un objet ts — check_ts","text":"Les fonctions du package date4ts sont faites pour fonctionner avec des times-series de fréquence mensuelle ou trimestrielle et basées sur le système des mois, trimestres et années classiques. travaille avec des données numériques (integer, double ou logical) mais les autres types atomic sont acceptés également. cherche donc à favoriser l'utilisation de séries temporelles classiques utilisants des types atomiques. Lorsque l'objet x en entrée est au mauvais format, une erreur est généré. Selon le préfixe de la fonction : si le check réussi : la fonction assert_ts retourne l'objet x de manière invisible; la fonction check_ts retourne le booléen TRUE. si le check échoue : la fonction assert_ts retourne un message d'erreur; la fonction check_ts retourne une chaîne de caractère signalant le problème.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/check_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie la conformité d'un objet ts — check_ts","text":"","code":"ts1 <- ts(1:100, start = 2010L, frequency = 12L) ts2 <- ts(1:10, start = c(2020L, 4L), frequency = 4L)  assert_ts(ts1) assert_ts(ts2)  check_ts(ts1) #> [1] TRUE check_ts(ts2) #> [1] TRUE  # Exemples avec des erreurs  check_ts(1) #> [1] \"* 1 Must inherit from class 'ts', but has class 'numeric'\" check_ts(ts(1:10, start = 2010L, frequency = 2L)) #> [1] \"* frequency_ts Must be element of set {'4','12'}, but is '2'\" check_ts(1:10) #> [1] \"* 1:10 Must inherit from class 'ts', but has class 'integer'\""},{"path":"https://tractortom.github.io/date4ts/reference/combine2ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Combiner 2 ts — combine2ts","title":"Combiner 2 ts — combine2ts","text":"La fonction combine2ts combine (comme c()) 2 time series de même fréquence (mensuelle ou trimestrielle).","code":""},{"path":"https://tractortom.github.io/date4ts/reference/combine2ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combiner 2 ts — combine2ts","text":"","code":"combine2ts(a, b)"},{"path":"https://tractortom.github.io/date4ts/reference/combine2ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combiner 2 ts — combine2ts","text":"un objet ts unidimensionnel conforme aux règles de assert_ts b un objet ts unidimensionnel conforme aux règles de assert_ts","code":""},{"path":"https://tractortom.github.io/date4ts/reference/combine2ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combiner 2 ts — combine2ts","text":"En sortie, la fonction retourne un ts qui contient les valeurs de aux temps de et les valeurs de b aux temps de b.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/combine2ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combiner 2 ts — combine2ts","text":"Si et b ont une période en commun, les valeurs de b écrasent celles de sur la période concernée. Si il existe une période sur laquelle ni ni b ne prennent de valeur (mais qu'il existe des valeurs à des dates ultérieures et antérieures) alors le ts en sortie prendra NA sur cette période.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/combine2ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combiner 2 ts — combine2ts","text":"","code":"trim_1 <- stats::ts(rep(1, 4), start = 2021, frequency = 4L)  mens_1 <- stats::ts(rep(1, 4), start = 2020, frequency = 12L) mens_2 <- stats::ts(rep(2, 4), start = 2022, frequency = 12L)  # La série de PIB est écrasé par trim_1 sur la période temporelle de trim_1 combine2ts(ev_pib, trim_1) #>               Qtr1          Qtr2          Qtr3          Qtr4 #> 1970            NA            NA            NA            NA #> 1971            NA            NA            NA            NA #> 1972            NA            NA            NA            NA #> 1973            NA            NA            NA            NA #> 1974            NA            NA            NA            NA #> 1975            NA            NA            NA            NA #> 1976            NA            NA            NA            NA #> 1977            NA            NA            NA            NA #> 1978            NA            NA            NA            NA #> 1979            NA            NA            NA            NA #> 1980            NA  -0.552712174  -0.086754850  -0.130764175 #> 1981   0.436797694   0.663555818   0.655755678   0.465977515 #> 1982   0.892058545   0.662204954   0.047370440   0.507157219 #> 1983   0.581233329  -0.042548981   0.077874681   0.583935348 #> 1984   0.619554314   0.363253711   0.462243113   0.288218891 #> 1985   0.123719710   0.631349292   0.756575266   0.327524429 #> 1986   0.357772133   1.122129272   0.326669036   0.370966439 #> 1987   0.251659155   1.144598588   0.680758053   1.694026185 #> 1988   1.231391234   0.593185145   1.302640709   1.065361026 #> 1989   1.260037978   0.825806743   1.075064005   1.523944130 #> 1990   0.517826385   0.377746880   0.459923112   0.366254003 #> 1991  -0.156699858   0.309591699   0.289346425   0.496079715 #> 1992   0.967856839  -0.057920191   0.028450027  -0.223321860 #> 1993  -0.556650909   0.039547303   0.133452547   0.269728893 #> 1994   0.725093411   1.095551160   0.539244435   0.886607198 #> 1995   0.569503181   0.478767111   0.081524147   0.164939274 #> 1996   0.631394447   0.165893251   0.621382576   0.125750143 #> 1997   0.302664793   1.148738446   0.785645124   1.092788520 #> 1998   0.838700519   0.933602781   0.685747514   0.764421531 #> 1999   0.504428016   0.825984551   1.222733930   1.401265205 #> 2000   0.909693692   0.987402187   0.624501289   0.812645817 #> 2001   0.547797973   0.184046964   0.272336544   0.026816438 #> 2002   0.372541324   0.461330701   0.418587141  -0.054011578 #> 2003   0.203235664  -0.218262571   0.676991816   0.717703853 #> 2004   0.939180093   0.645697044   0.258638250   0.744155119 #> 2005   0.269714193   0.198490900   0.500009124   0.776948575 #> 2006   0.754542470   1.015941519   0.013572258   0.786297420 #> 2007   0.740940215   0.773456477   0.351755993   0.225637214 #> 2008   0.395791727  -0.412315400  -0.280602493  -1.467532567 #> 2009  -1.632375943  -0.101454578   0.160750061   0.695136221 #> 2010   0.368232308   0.507493101   0.645610703   0.704301595 #> 2011   0.997901680   0.027941934   0.367134262   0.173618343 #> 2012   0.093557392  -0.157293866   0.191962538  -0.077204189 #> 2013  -0.001133455   0.655711072   0.012011561   0.475525630 #> 2014   0.084980333   0.118498226   0.504372721   0.081229345 #> 2015   0.489945372   0.007744848   0.332080732   0.139118865 #> 2016   0.636268205  -0.161024723   0.198728721   0.544690904 #> 2017   0.816780164   0.820053915   0.622880698   0.828202860 #> 2018   0.048700300   0.382559370   0.366396552   0.701164421 #> 2019   0.665798334   0.604099134   0.011971808  -0.400152537 #> 2020  -5.647477753 -13.443145590  18.555378962  -1.118046566 #> 2021   1.000000000   1.000000000   1.000000000   1.000000000 #> 2022  -0.047254400            NA            NA                # La période entre les séries temporelles mens_1 et mens_2 est complétée par # des NA combine2ts(mens_1, mens_2) #> Warning: extending time series when replacing values #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 2020   1   1   1   1  NA  NA  NA  NA  NA  NA  NA  NA #> 2021  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2022   2   2   2   2"},{"path":"https://tractortom.github.io/date4ts/reference/date2date_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion d'une date au format TS — date2date_ts","title":"Conversion d'une date au format TS — date2date_ts","text":"La fonction date2date_ts prend en argument une date au format date (integer avec une class Date) et la convertit au format date_ts : c(AAAA, MM) ou c(AAAA, TT) avec le mois ou trimestre en cours.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date2date_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion d'une date au format TS — date2date_ts","text":"","code":"date2date_ts(date, frequency_ts = 12L)"},{"path":"https://tractortom.github.io/date4ts/reference/date2date_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion d'une date au format TS — date2date_ts","text":"date un objet de type Date frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date2date_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion d'une date au format TS — date2date_ts","text":"En sortie, la fonction retourne la date au format date_ts (c(AAAA, MM) ou c(AAAA, TT)) avec le mois ou trimestre en cours selon l'argument frequency_ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date2date_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion d'une date au format TS — date2date_ts","text":"","code":"date2date_ts(as.Date(\"2000-01-01\")) #> [1] 2000    1 date2date_ts(as.Date(\"2000-01-01\"), frequency_ts = 12L) #> [1] 2000    1  date2date_ts(as.Date(\"2021-10-01\"), frequency_ts = 12L) #> [1] 2021   10 date2date_ts(as.Date(\"2021-10-01\"), frequency_ts = 4L) #> [1] 2021    4"},{"path":"https://tractortom.github.io/date4ts/reference/date4ts-package.html","id":null,"dir":"Reference","previous_headings":"","what":"date4ts: Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates — date4ts-package","title":"date4ts: Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates — date4ts-package","text":"ts objects R managed using specific date format (form c(2022, 9) September 2022 c(2021, 2) second quarter 2021, depending frequency, example). focus solely monthly quarterly series manage dates ts objects. general idea offer set functions manage date format without restrictive imprecise depending rounding. compromise simplicity, precision use basic 'stats' functions creating managing time series (ts(), window()). Les objets ts en R sont gérés par un format de date très particulier (sous la forme c(2022, 9) pour septembre 2022 ou c(2021, 2) pour le deuxième trimestre 2021 selon la fréquence par exemple). se concentre uniquement sur les séries mensuelles et trimestrielles pour gérer les dates des objets ts. Lidée générale est de proposer un ensemble de fonctions pour gérer ce format de date sans que ce soit trop contraignant ou trop imprécis selon les arrondis. Cest un compromis entre simplicité, précision et utilisation des fonctions du package 'stats' de création et de gestion des séries temporelles (ts(), window()).","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/reference/date4ts-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"date4ts: Wrangle and Modify Ts Object with Classic Frequencies and Exact Dates — date4ts-package","text":"Maintainer: Tanguy Barthelemy tangbarth@hotmail.fr","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2date.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion d'une date du format TS au format date — date_ts2date","title":"Conversion d'une date du format TS au format date — date_ts2date","text":"Conversion d'une date du format TS au format date","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion d'une date du format TS au format date — date_ts2date","text":"","code":"date_ts2date(date_ts, frequency_ts)"},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion d'une date du format TS au format date — date_ts2date","text":"date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion d'une date du format TS au format date — date_ts2date","text":"En sortie, la fonction retourne un objet de type Date (atomic) de longueur 1 qui correspond à l'objet date_ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion d'une date du format TS au format date — date_ts2date","text":"","code":"date_ts2date(date_ts = c(2020L, 11L), frequency_ts = 12L) #> [1] \"2020-11-01\" date_ts2date(date_ts = c(1995L, 2L), frequency_ts = 4L) #> [1] \"1995-04-01\""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2timeunits.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion d'une date du format date_ts au format TimeUnits — date_ts2timeunits","title":"Conversion d'une date du format date_ts au format TimeUnits — date_ts2timeunits","text":"Conversion d'une date du format date_ts au format TimeUnits","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2timeunits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion d'une date du format date_ts au format TimeUnits — date_ts2timeunits","text":"","code":"date_ts2timeunits(date_ts, frequency_ts)"},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2timeunits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion d'une date du format date_ts au format TimeUnits — date_ts2timeunits","text":"date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2timeunits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion d'une date du format date_ts au format TimeUnits — date_ts2timeunits","text":"En sortie, la fonction retourne la date au format AAAA + TT/4 ou AAAA + MM/12 (un numeric de longueur 1).","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2timeunits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion d'une date du format date_ts au format TimeUnits — date_ts2timeunits","text":"AAAA signifie que l'année est au format numérique avec 4 chiffres (Exemple : l'année deux mille vingt-deux s'écrit 2022 et non 22) MM signifie que le mois est au format numérique (Exemple : le mois de mai s'écrit 5, le moi de décembre s'écrit 12) TT signifie que le trimestre est au format numérique (Exemple : le troisième trimestre s'écrit 3)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/date_ts2timeunits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion d'une date du format date_ts au format TimeUnits — date_ts2timeunits","text":"","code":"# Avril 2020 date_ts2timeunits(date_ts = c(2020L, 4L), frequency_ts = 12L) #> [1] 2020.25 # Novembre 2020 date_ts2timeunits(date_ts = c(2022L, 11L), frequency_ts = 12L) #> [1] 2022.833  # 4ème trimestre de 2022 date_ts2timeunits(date_ts = c(2022, 4L), frequency_ts = 4L) #> Warning: Assertion on 'date_ts' failed: Must be of type 'integer', not 'double'. #> [1] 2022.75 # 2ème trimestre de 1995 date_ts2timeunits(date_ts = c(1995L, 2L), frequency_ts = 4L) #> [1] 1995.25"},{"path":"https://tractortom.github.io/date4ts/reference/diff_periode.html","id":null,"dir":"Reference","previous_headings":"","what":"Intervalle entre 2 dates — diff_periode","title":"Intervalle entre 2 dates — diff_periode","text":"Intervalle entre 2 dates","code":""},{"path":"https://tractortom.github.io/date4ts/reference/diff_periode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intervalle entre 2 dates — diff_periode","text":"","code":"diff_periode(a, b, frequency_ts)"},{"path":"https://tractortom.github.io/date4ts/reference/diff_periode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intervalle entre 2 dates — diff_periode","text":"un objet date_ts, c'est-à-dire un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT) b un objet date_ts, c'est-à-dire un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/diff_periode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intervalle entre 2 dates — diff_periode","text":"En sortie, la fonction retourne un entier qui désigne le nombre de période (mois ou trimestres) qui sépare les 2 dates et b.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/diff_periode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Intervalle entre 2 dates — diff_periode","text":"travaille ici avec des dates au format date_ts, c'est-à-dire qui passe le test de la fonction assert_date_ts. Lorsqu'parle d'intervalle et de nombre de période entre et b, les bornes sont incluses. Ainsi diff_periode(2020L, 2020L, 12L) retourne bien 1L et non 2L ou 0L.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/diff_periode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intervalle entre 2 dates — diff_periode","text":"","code":"# Une seule période diff_periode(a = 2020L, b = 2020L, frequency_ts = 4L) #> [1] 1  diff_periode(a = c(2000L, 1L), b = c(2020L, 4L), frequency_ts = 4L) #> [1] 84  # Ordre chronologique respecté diff_periode(a = c(2021L, 5L), b = c(2023L, 8L), frequency_ts = 12L) #> [1] 28  # Date inversées diff_periode(a = c(2023L, 8L), b = c(2021L, 5L), frequency_ts = 12L) #> [1] 28"},{"path":"https://tractortom.github.io/date4ts/reference/ev_pib.html","id":null,"dir":"Reference","previous_headings":"","what":"Évolution du PIB français jusqu'au T1 2022 — ev_pib","title":"Évolution du PIB français jusqu'au T1 2022 — ev_pib","text":"Ce jeu de données contient une série ts de l'évolution trimestrielle du produit intérieur brut français. Toutes les infos complémentaires sur cette série se trouve sur la page de la publication sur le site de l'Insee.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/ev_pib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Évolution du PIB français jusqu'au T1 2022 — ev_pib","text":"","code":"ev_pib"},{"path":"https://tractortom.github.io/date4ts/reference/ev_pib.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Évolution du PIB français jusqu'au T1 2022 — ev_pib","text":"Un ts unidimensionnel : start le ts commence au T1 1970 mais la série de PIB ne commence qu'au T2 1980. end le ts finit au T3 2022 mais la série de PIB finit au T1 2022. frequency_ts la fréquence est trimestrielle","code":""},{"path":"https://tractortom.github.io/date4ts/reference/ev_pib.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Évolution du PIB français jusqu'au T1 2022 — ev_pib","text":"https://www.insee.fr/fr/statistiques/2830547","code":""},{"path":"https://tractortom.github.io/date4ts/reference/extend_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Ajoute de nouvelles valeurs à un ts — extend_ts","title":"Ajoute de nouvelles valeurs à un ts — extend_ts","text":"La fonction extend_ts ajoute de nouvelles valeurs à un ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/extend_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ajoute de nouvelles valeurs à un ts — extend_ts","text":"","code":"extend_ts(series, replacement, date_ts = NULL, replace_na = TRUE)"},{"path":"https://tractortom.github.io/date4ts/reference/extend_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ajoute de nouvelles valeurs à un ts — extend_ts","text":"series un objet ts unidimensionnel conforme aux règles de assert_ts replacement un vecteur de même type que le ts series date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) replace_na un booléen","code":""},{"path":"https://tractortom.github.io/date4ts/reference/extend_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ajoute de nouvelles valeurs à un ts — extend_ts","text":"En sortie, la fonction retourne une copie de l'objet series complété avec le vecteur replacement.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/extend_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ajoute de nouvelles valeurs à un ts — extend_ts","text":"date_ts désigne la date jusqu'à laquelle le remplacement s'effectue. Par défault, cette valeur vaut NULL. Si replace_na vaut TRUE alors le remplacement commence dès que l'objet ne contient que des NA. Dans le cas contraire, le ts est étendu, qu'il contienne des NA ou non à la fin. Si le vecteur replacement est de taille un sous-multiple de la différence de période entre la date de fin de series et date_ts, le vecteur replacement est répété jusqu'à la date date_ts. Sinon une erreur est générée.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/extend_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ajoute de nouvelles valeurs à un ts — extend_ts","text":"","code":"ts1 <- ts(     data = c(rep(NA_integer_, 3L), 1L:10L, rep(NA_integer_, 3L)),     start = 2020,     frequency = 12 ) x <- rep(3L, 2L)  extend_ts(series = ts1, replacement = x) #> Warning: extending time series when replacing values #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 2020  NA  NA  NA   1   2   3   4   5   6   7   8   9 #> 2021  10   3   3                                     extend_ts(series = ts1, replacement = x, replace_na = FALSE) #> Warning: extending time series when replacing values #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 2020  NA  NA  NA   1   2   3   4   5   6   7   8   9 #> 2021  10  NA  NA  NA   3   3                         extend_ts(series = ts1, replacement = x,           date_ts = c(2021L, 7L), replace_na = TRUE) #> Warning: extending time series when replacing values #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 2020  NA  NA  NA   1   2   3   4   5   6   7   8   9 #> 2021  10   3   3   3   3   3   3"},{"path":"https://tractortom.github.io/date4ts/reference/first_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Première date non NA — first_date","title":"Première date non NA — first_date","text":"Cette fonction calcule la première date pour laquelle l'objet series ne vaut pas NA.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/first_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Première date non NA — first_date","text":"","code":"first_date(series)"},{"path":"https://tractortom.github.io/date4ts/reference/first_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Première date non NA — first_date","text":"series un objet ts unidimensionnel conforme aux règles de assert_ts","code":""},{"path":"https://tractortom.github.io/date4ts/reference/first_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Première date non NA — first_date","text":"En sortie, la fonction retourne un objet au format date_ts (AAAA, c(AAAA, MM) ou c(AAAA, TT))","code":""},{"path":"https://tractortom.github.io/date4ts/reference/first_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Première date non NA — first_date","text":"La date retournée en output est au format date_ts. Si l'objet series ne contient que des NAs, la fonction retourne une erreur.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/reference/first_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Première date non NA — first_date","text":"","code":"ts1 <- ts(c(NA, NA, NA, 1:10, NA), start = 2000, frequency = 12L) ts2 <- ts(c(1:10, NA), start = 2020, frequency = 4L)  stats::start(ts1) #> [1] 2000    1 first_date(ts1) #> [1] 2000    4  stats::start(ts1) #> [1] 2000    1 first_date(ts2) #> [1] 2020    1"},{"path":"https://tractortom.github.io/date4ts/reference/get_value_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Récupère des valeurs d'un ts — get_value_ts","title":"Récupère des valeurs d'un ts — get_value_ts","text":"La fonction get_value_ts permet de récupérer des valeurs.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/get_value_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Récupère des valeurs d'un ts — get_value_ts","text":"","code":"get_value_ts(series, date_from, date_to, n)"},{"path":"https://tractortom.github.io/date4ts/reference/get_value_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Récupère des valeurs d'un ts — get_value_ts","text":"series un objet ts unidimensionnel conforme aux règles de assert_ts date_from un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT) date_to un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT) n un entier","code":""},{"path":"https://tractortom.github.io/date4ts/reference/get_value_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Récupère des valeurs d'un ts — get_value_ts","text":"En sortie, la fonction retourne un vecteur (atomic) de même type que series avec les valeurs extraites.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/get_value_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Récupère des valeurs d'un ts — get_value_ts","text":"Il faut qu'exactement 2 arguments parmi date_to, date_to et n soient renseignés. L'argument n combiné avec date_to ou date_from permet de déterminer combien de période seront retourné à partir de ou jusqu'à la date renseignée.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/get_value_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Récupère des valeurs d'un ts — get_value_ts","text":"","code":"ts1 <- ts(1:100, start = 2012L, frequency = 12L) ts2 <- ts(letters, start = 2014L, frequency = 4L) ts3 <- ts(exp(-(1:50)), start = 2015L, frequency = 12L)  get_value_ts(series = ts1, date_from = c(2015L, 7L), date_to = c(2018L, 6L)) #>  [1] 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #> [26] 68 69 70 71 72 73 74 75 76 77 78 get_value_ts(series = ts2, date_from = c(2018L, 4L), n = 4L) #> [1] \"t\" \"u\" \"v\" \"w\" get_value_ts(series = ts3, date_to = c(2018L, 4L), n = 14L) #>  [1] 1.879529e-12 6.914400e-13 2.543666e-13 9.357623e-14 3.442477e-14 #>  [6] 1.266417e-14 4.658886e-15 1.713908e-15 6.305117e-16 2.319523e-16 #> [11] 8.533048e-17 3.139133e-17 1.154822e-17 4.248354e-18"},{"path":"https://tractortom.github.io/date4ts/reference/is_before.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparaison de 2 date_ts — is_before","title":"Comparaison de 2 date_ts — is_before","text":"Comparaison de 2 date_ts","code":""},{"path":"https://tractortom.github.io/date4ts/reference/is_before.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparaison de 2 date_ts — is_before","text":"","code":"is_before(a, b, frequency_ts, strict = FALSE)"},{"path":"https://tractortom.github.io/date4ts/reference/is_before.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparaison de 2 date_ts — is_before","text":"un objet date_ts, c'est-à-dire un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT) b un objet date_ts, c'est-à-dire un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. strict un booleen (default FALSE)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/is_before.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparaison de 2 date_ts — is_before","text":"En sortie, la fonction retourne un booleen (de longueur 1) qui indique si la date est antérieure à la date b.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/is_before.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparaison de 2 date_ts — is_before","text":"Les dates et b sont au format date_ts. L'argument frequency_ts est nécessaire pour interpréter les dates. Ainsi, si je souhaite comparer la date = c(2023L, 4L) et la date b = c(2023L, -2L). Dans le cas d'une fréquence mensuelle, la date est antérieure à la date b. Dans le cas d'une fréquence mensuelle, c'est l'inverse. Si strict vaut TRUE, la fonction compare strictement les dates et b (<).","code":""},{"path":"https://tractortom.github.io/date4ts/reference/is_before.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparaison de 2 date_ts — is_before","text":"","code":"is_before(a = c(2020L, 3L), b = c(2022L, 4L), frequency_ts = 12L) #> [1] TRUE is_before(a = c(2022L, 3L), b = c(2010L, 1L), frequency_ts = 4L) #> [1] FALSE  is_before(a = c(2022L, 4L), b = c(2022L, 4L), frequency_ts = 12L) #> [1] TRUE is_before(a = c(2022L, 4L), b = c(2022L, 4L),     frequency_ts = 12L, strict = TRUE) #> [1] FALSE  # Importance de la fréquence is_before(a = c(2022L, -3L), b = c(2021L, 8L), frequency_ts = 12L) #> Warning: Assertion on 'period' failed: Element 1 is not >= 1. #> [1] FALSE is_before(a = c(2022L, -3L), b = c(2021L, 8L), frequency_ts = 4L) #> Warning: Assertion on 'period' failed: Element 1 is not >= 1. #> Warning: Assertion on 'period' failed: Element 1 is not <= 4. #> [1] TRUE"},{"path":"https://tractortom.github.io/date4ts/reference/last_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Dernière date non NA — last_date","title":"Dernière date non NA — last_date","text":"Cette fonction calcule la dernière date pour laquelle l'objet series ne vaut pas NA.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/last_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dernière date non NA — last_date","text":"","code":"last_date(series)"},{"path":"https://tractortom.github.io/date4ts/reference/last_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dernière date non NA — last_date","text":"series un objet ts unidimensionnel conforme aux règles de assert_ts","code":""},{"path":"https://tractortom.github.io/date4ts/reference/last_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dernière date non NA — last_date","text":"En sortie, la fonction retourne un objet au format date_ts (AAAA, c(AAAA, MM) ou c(AAAA, TT))","code":""},{"path":"https://tractortom.github.io/date4ts/reference/last_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dernière date non NA — last_date","text":"La date retournée en output est au format date_ts. Si l'objet series ne contient que des NAs, la fonction retourne une erreur.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/reference/last_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dernière date non NA — last_date","text":"","code":"ts1 <- ts(c(NA, NA, NA, 1:10, NA), start = 2000, frequency = 12L) ts2 <- ts(c(1:10), start = 2020, frequency = 4L)  stats::end(ts1) #> [1] 2001    2 last_date(ts1) #> [1] 2001    1  stats::end(ts2) #> [1] 2022    2 last_date(ts2) #> [1] 2022    2"},{"path":"https://tractortom.github.io/date4ts/reference/libelles.html","id":null,"dir":"Reference","previous_headings":"","what":"Libelés pour une période — libelles","title":"Libelés pour une période — libelles","text":"La fonction libelles créé un vecteur de chaines de caractère contenant les libelés de toutes les dates sur une période","code":""},{"path":"https://tractortom.github.io/date4ts/reference/libelles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Libelés pour une période — libelles","text":"","code":"libelles(date_ts, frequency_ts, n = 1L, warn = TRUE)"},{"path":"https://tractortom.github.io/date4ts/reference/libelles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Libelés pour une période — libelles","text":"date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. n un entier warn un booleen","code":""},{"path":"https://tractortom.github.io/date4ts/reference/libelles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Libelés pour une période — libelles","text":"En sortie, la fonction retourne un vecteur de chaine de caractère de longueur n avec les libellés de la période (de la date date_ts à la date date_ts + n périodes.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/libelles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Libelés pour une période — libelles","text":"Pour choisir la période, il faut spécifier une date de début date_ts, une fréquence frequency_ts pour le pas entre 2 dates (trimestrielle ou mensuelle) et un nombre de valeur n (nombre de période). Si l'argument warn est FALSE, alors la fonction ne retournera pas de warning lors de l'évaluation.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/libelles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Libelés pour une période — libelles","text":"","code":"libelles(date_ts = c(2019L, 10L), frequency_ts = 12L, n = 9L) #> [1] \"Oct 2019\" \"Nov 2019\" \"Dec 2019\" \"Jan 2020\" \"Feb 2020\" \"Mar 2020\" \"Apr 2020\" #> [8] \"May 2020\" \"Jun 2020\" libelles(date_ts = c(2019L, 4L), frequency_ts = 4L, n = 3L) #> [1] \"Q4 2019\" \"Q1 2020\" \"Q2 2020\""},{"path":"https://tractortom.github.io/date4ts/reference/na_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Supprime les NA aux bords — na_trim","title":"Supprime les NA aux bords — na_trim","text":"La fonction na_trim supprime les NA en début et en fin de période.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/na_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supprime les NA aux bords — na_trim","text":"","code":"na_trim(series, sides = c(\"both\", \"left\", \"right\"))"},{"path":"https://tractortom.github.io/date4ts/reference/na_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supprime les NA aux bords — na_trim","text":"series un objet ts unidimensionnel conforme aux règles de assert_ts sides une chaine de caractere qui spécifie quelle NA doivent être retirés (au début et à la fin (\"\"), juste au début (\"left\") ou juste à la fin (\"right\"))","code":""},{"path":"https://tractortom.github.io/date4ts/reference/na_trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supprime les NA aux bords — na_trim","text":"En sortie, la fonction retourne une copie de l'objet series corrigé des NA et début et fin de série.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/na_trim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Supprime les NA aux bords — na_trim","text":"L'objet retourné commence et finis par des valeurs non manquantes.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/na_trim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supprime les NA aux bords — na_trim","text":"","code":"ts1 <- ts(c(rep(NA, 3L), 1:10, rep(NA, 3L)), start = 2020, frequency = 12L) ts2 <- ts(c(1:10, rep(NA, 3L)), start = c(2023, 2), frequency = 4L) ts3 <- ts(c(rep(NA, 3L), 1:10), start = 2000, frequency = 12L)  na_trim(ts1) #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 2020               1   2   3   4   5   6   7   8   9 #> 2021  10                                             na_trim(ts2) #>      Qtr1 Qtr2 Qtr3 Qtr4 #> 2023         1    2    3 #> 2024    4    5    6    7 #> 2025    8    9   10      na_trim(ts3) #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 2000               1   2   3   4   5   6   7   8   9 #> 2001  10"},{"path":"https://tractortom.github.io/date4ts/reference/next_date_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtenir la date suivante — next_date_ts","title":"Obtenir la date suivante — next_date_ts","text":"Obtenir la date suivante","code":""},{"path":"https://tractortom.github.io/date4ts/reference/next_date_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtenir la date suivante — next_date_ts","text":"","code":"next_date_ts(date_ts, frequency_ts, lag = 1L)"},{"path":"https://tractortom.github.io/date4ts/reference/next_date_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtenir la date suivante — next_date_ts","text":"date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. lag un entier","code":""},{"path":"https://tractortom.github.io/date4ts/reference/next_date_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtenir la date suivante — next_date_ts","text":"En sortie, la fonction retourne un vecteur d'entier qui représente la date à la période future au format date_ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/next_date_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtenir la date suivante — next_date_ts","text":"Lorsqu'parle de date suivante, parle de date future. L'argument lag est entier et désigne le nombre de décalage que l'affecte à notre date. Par exemple pour des lag positif (1L, 2L, 10L) désigne le décalage de la période suivante, celle d'après et celle dans 10 périodes. Cependant, lorsque l'argument lag vaut zéro, la fonction retourne la date inchangée. Aussi lorsque l'argument lag est négatif, la fonction se comporte comme la fonction previous_date_ts et retourne les périodes passées et non futures.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/reference/next_date_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtenir la date suivante — next_date_ts","text":"","code":"next_date_ts(c(2020L, 4L), frequency_ts = 4L, lag = 2L) #> [1] 2021    2 next_date_ts(c(2021L, 1L), frequency_ts = 4L, lag = -2L) #> [1] 2020    3  next_date_ts(c(2020L, 4L), frequency_ts = 12L, lag = 2L) #> [1] 2020    6 next_date_ts(c(2022L, 6L), frequency_ts = 12L, lag = 12L) #> [1] 2023    6"},{"path":"https://tractortom.github.io/date4ts/reference/normalize_date_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Ajuste un objet date_ts dans un format conforme. — normalize_date_ts","title":"Ajuste un objet date_ts dans un format conforme. — normalize_date_ts","text":"Ajuste un objet date_ts dans un format conforme.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/normalize_date_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ajuste un objet date_ts dans un format conforme. — normalize_date_ts","text":"","code":"normalize_date_ts(date_ts, frequency_ts, test = TRUE)"},{"path":"https://tractortom.github.io/date4ts/reference/normalize_date_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ajuste un objet date_ts dans un format conforme. — normalize_date_ts","text":"date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. test un booléen (Default TRUE)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/normalize_date_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ajuste un objet date_ts dans un format conforme. — normalize_date_ts","text":"En sortie, la fonction retourne une date au même format que l'objet date_ts avec la période inclus entre 1 et la fréquence.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/normalize_date_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ajuste un objet date_ts dans un format conforme. — normalize_date_ts","text":"Ici le formattage correspond à une réécriture de la date sans en changer la valeur. Alors que l'objet c(2020L, 12L) désigne le mois de décembre 2020 et c(2021L, 1L) le mois de janvier 2021, peut imaginer que la date_ts c(2021L, 0L) peut aussi représenter le mois de décembre 2020. Si l'argument test est mis à FALSE, alors aucun test ne sera effectué sur les données en entrée.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/normalize_date_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ajuste un objet date_ts dans un format conforme. — normalize_date_ts","text":"","code":"# Formattage inchangée normalize_date_ts(c(2020L, 1L), frequency_ts = 4L) # 1er trimestre de 2020 #> [1] 2020    1 normalize_date_ts(c(2020L, 8L), frequency_ts = 12L) # Aout 2020 #> [1] 2020    8  # Retour dans le passé normalize_date_ts(c(2020L, 0L), frequency_ts = 4L) # 4ème trimestre de 2019 #> Warning: Assertion on 'period' failed: Element 1 is not >= 1. #> [1] 2019    4 normalize_date_ts(c(2020L, -10L), frequency_ts = 12L) # février 2019 #> Warning: Assertion on 'period' failed: Element 1 is not >= 1. #> [1] 2019    2  # Avancée dans le futur normalize_date_ts(c(2020L, 7L), frequency_ts = 4L) # 3ème trimestre de 2021 #> Warning: Assertion on 'period' failed: Element 1 is not <= 4. #> [1] 2021    3 normalize_date_ts(c(2020L, 13L), frequency_ts = 4L) # janvier 2021 #> Warning: Assertion on 'period' failed: Element 1 is not <= 4. #> [1] 2023    1"},{"path":"https://tractortom.github.io/date4ts/reference/previous_date_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtenir la date précédente — previous_date_ts","title":"Obtenir la date précédente — previous_date_ts","text":"Obtenir la date précédente","code":""},{"path":"https://tractortom.github.io/date4ts/reference/previous_date_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtenir la date précédente — previous_date_ts","text":"","code":"previous_date_ts(date_ts, frequency_ts, lag = 1L)"},{"path":"https://tractortom.github.io/date4ts/reference/previous_date_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtenir la date précédente — previous_date_ts","text":"date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) frequency_ts un entier qui vaut 4L (ou 4.0) pour les séries trimestrielles et 12L (ou 12.0) pour les séries mensuelles. lag un entier","code":""},{"path":"https://tractortom.github.io/date4ts/reference/previous_date_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtenir la date précédente — previous_date_ts","text":"En sortie, la fonction retourne un vecteur d'entier qui représente la date à la période passée au format date_ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/previous_date_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtenir la date précédente — previous_date_ts","text":"Lorsqu'parle de date précédente, parle de date passée. L'argument lag est entier et désigne le nombre de décalage que l'affecte à notre date. Par exemple pour des lag positif (1L, 2L, 10L) désigne le décalage de la période précédente, celle d'avant et celle d'il y 10 périodes. Cependant, lorsque l'argument lag vaut zéro, la fonction retourne la date inchangée. Aussi lorsque l'argument lag est négatif, la fonction se comporte comme la fonction next_date_ts et retourne les périodes futures et non passées.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/reference/previous_date_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtenir la date précédente — previous_date_ts","text":"","code":"previous_date_ts(c(2020L, 4L), frequency_ts = 4L, lag = 2L) #> [1] 2020    2 previous_date_ts(c(2021L, 1L), frequency_ts = 4L, lag = -2L) #> [1] 2021    3  previous_date_ts(c(2020L, 4L), frequency_ts = 12L, lag = 2L) #> [1] 2020    2 previous_date_ts(c(2022L, 6L), frequency_ts = 12L, lag = 12L) #> [1] 2021    6"},{"path":"https://tractortom.github.io/date4ts/reference/set_value_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Change certaines valeurs d'un ts — set_value_ts","title":"Change certaines valeurs d'un ts — set_value_ts","text":"La fonction set_value_ts modifie la ou les valeurs d'un objet ts à une date donnée.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/set_value_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change certaines valeurs d'un ts — set_value_ts","text":"","code":"set_value_ts(series, date_ts, replacement)"},{"path":"https://tractortom.github.io/date4ts/reference/set_value_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change certaines valeurs d'un ts — set_value_ts","text":"series un objet ts unidimensionnel conforme aux règles de assert_ts date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT) replacement un vecteur de même type que le ts series","code":""},{"path":"https://tractortom.github.io/date4ts/reference/set_value_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change certaines valeurs d'un ts — set_value_ts","text":"En sortie, la fonction retourne une copie de l'objet series modifié avec les valeurs de replacement imputés à partir de la date date_ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/set_value_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change certaines valeurs d'un ts — set_value_ts","text":"","code":"set_value_ts(     series = ev_pib,     date_ts = c(2021L, 2L),     replacement = c(1, 2, 3) ) #>               Qtr1          Qtr2          Qtr3          Qtr4 #> 1970            NA            NA            NA            NA #> 1971            NA            NA            NA            NA #> 1972            NA            NA            NA            NA #> 1973            NA            NA            NA            NA #> 1974            NA            NA            NA            NA #> 1975            NA            NA            NA            NA #> 1976            NA            NA            NA            NA #> 1977            NA            NA            NA            NA #> 1978            NA            NA            NA            NA #> 1979            NA            NA            NA            NA #> 1980            NA  -0.552712174  -0.086754850  -0.130764175 #> 1981   0.436797694   0.663555818   0.655755678   0.465977515 #> 1982   0.892058545   0.662204954   0.047370440   0.507157219 #> 1983   0.581233329  -0.042548981   0.077874681   0.583935348 #> 1984   0.619554314   0.363253711   0.462243113   0.288218891 #> 1985   0.123719710   0.631349292   0.756575266   0.327524429 #> 1986   0.357772133   1.122129272   0.326669036   0.370966439 #> 1987   0.251659155   1.144598588   0.680758053   1.694026185 #> 1988   1.231391234   0.593185145   1.302640709   1.065361026 #> 1989   1.260037978   0.825806743   1.075064005   1.523944130 #> 1990   0.517826385   0.377746880   0.459923112   0.366254003 #> 1991  -0.156699858   0.309591699   0.289346425   0.496079715 #> 1992   0.967856839  -0.057920191   0.028450027  -0.223321860 #> 1993  -0.556650909   0.039547303   0.133452547   0.269728893 #> 1994   0.725093411   1.095551160   0.539244435   0.886607198 #> 1995   0.569503181   0.478767111   0.081524147   0.164939274 #> 1996   0.631394447   0.165893251   0.621382576   0.125750143 #> 1997   0.302664793   1.148738446   0.785645124   1.092788520 #> 1998   0.838700519   0.933602781   0.685747514   0.764421531 #> 1999   0.504428016   0.825984551   1.222733930   1.401265205 #> 2000   0.909693692   0.987402187   0.624501289   0.812645817 #> 2001   0.547797973   0.184046964   0.272336544   0.026816438 #> 2002   0.372541324   0.461330701   0.418587141  -0.054011578 #> 2003   0.203235664  -0.218262571   0.676991816   0.717703853 #> 2004   0.939180093   0.645697044   0.258638250   0.744155119 #> 2005   0.269714193   0.198490900   0.500009124   0.776948575 #> 2006   0.754542470   1.015941519   0.013572258   0.786297420 #> 2007   0.740940215   0.773456477   0.351755993   0.225637214 #> 2008   0.395791727  -0.412315400  -0.280602493  -1.467532567 #> 2009  -1.632375943  -0.101454578   0.160750061   0.695136221 #> 2010   0.368232308   0.507493101   0.645610703   0.704301595 #> 2011   0.997901680   0.027941934   0.367134262   0.173618343 #> 2012   0.093557392  -0.157293866   0.191962538  -0.077204189 #> 2013  -0.001133455   0.655711072   0.012011561   0.475525630 #> 2014   0.084980333   0.118498226   0.504372721   0.081229345 #> 2015   0.489945372   0.007744848   0.332080732   0.139118865 #> 2016   0.636268205  -0.161024723   0.198728721   0.544690904 #> 2017   0.816780164   0.820053915   0.622880698   0.828202860 #> 2018   0.048700300   0.382559370   0.366396552   0.701164421 #> 2019   0.665798334   0.604099134   0.011971808  -0.400152537 #> 2020  -5.647477753 -13.443145590  18.555378962  -1.118046566 #> 2021   0.156198162   1.000000000   2.000000000   3.000000000 #> 2022  -0.047254400            NA            NA"},{"path":"https://tractortom.github.io/date4ts/reference/substr_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Retire une année à une date — substr_year","title":"Retire une année à une date — substr_year","text":"La fonction substr_year retire n annnée(s) à une date.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/substr_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retire une année à une date — substr_year","text":"","code":"substr_year(date, n = 1L)"},{"path":"https://tractortom.github.io/date4ts/reference/substr_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retire une année à une date — substr_year","text":"date un objet de type Date n un entier","code":""},{"path":"https://tractortom.github.io/date4ts/reference/substr_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retire une année à une date — substr_year","text":"En sortie, la fonction retourne un objet de type Date (atomic) de longueur 1.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/substr_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retire une année à une date — substr_year","text":"","code":"substr_year(as.Date(\"2000-02-29\"), n = 1L) #> [1] \"1999-02-28\" substr_year(as.Date(\"2000-02-29\"), n = 3L) #> [1] \"1997-02-28\" substr_year(as.Date(\"2000-02-29\"), n = 4L) #> [1] \"1996-02-29\" substr_year(as.Date(\"2000-02-29\"), n = 16L) #> [1] \"1984-02-29\"  substr_year(as.Date(\"2023-01-25\"), n = 10L) #> [1] \"2013-01-25\" substr_year(as.Date(\"2022-11-01\"), n = 3L) #> [1] \"2019-11-01\""},{"path":"https://tractortom.github.io/date4ts/reference/trim2mens.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion entre date mensuelle et trimestrielle — trim2mens","title":"Conversion entre date mensuelle et trimestrielle — trim2mens","text":"Les fonctions trim2mens et mens2trim convertissent une date_ts du format mensuelle c(AAAA, MM) au format trimestrielle c(AAAA, TT).","code":""},{"path":"https://tractortom.github.io/date4ts/reference/trim2mens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion entre date mensuelle et trimestrielle — trim2mens","text":"","code":"trim2mens(date_ts)  mens2trim(date_ts)"},{"path":"https://tractortom.github.io/date4ts/reference/trim2mens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion entre date mensuelle et trimestrielle — trim2mens","text":"date_ts un vecteur numérique, de préférence integer, au format AAAA, c(AAAA, MM) ou c(AAAA, TT)","code":""},{"path":"https://tractortom.github.io/date4ts/reference/trim2mens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion entre date mensuelle et trimestrielle — trim2mens","text":"En sortie, la fonction retourne la date toujours au format date_ts.","code":""},{"path":"https://tractortom.github.io/date4ts/reference/trim2mens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion entre date mensuelle et trimestrielle — trim2mens","text":"","code":"trim2mens(c(2019L, 4L)) # 4ème trimestre 2019 --> Octobre 2019 #> [1] 2019   10 trim2mens(c(2020L, 1L)) # 1er trimestre 2020 --> Janvier 2020 #> [1] 2020    1  mens2trim(c(2019L, 4L)) # Avril 2019 --> 2ème trimestre 2019 #> [1] 2019    2 mens2trim(c(2020L, 11L)) # Novembre 2020 --> 4ème trimestre 2020 #> [1] 2020    4"},{"path":"https://tractortom.github.io/date4ts/why.html","id":null,"dir":"","previous_headings":"","what":"Why ?","title":"Why ?","text":"… Un petit document qui expliquent certains choix de développement faits.","code":""},{"path":"https://tractortom.github.io/date4ts/why.html","id":"pourquoi-ne-pas-utiliser-checkmatemakeassertionfunction","dir":"","previous_headings":"","what":"Pourquoi ne pas utiliser checkmate::makeAssertionFunction()","title":"Why ?","text":"J’aurai aimé juste construire les fonctions check et créer les assert avec. Seulement, le nom des objets est mal pris en compte pour les checks. Un petit exemple illustratif : remarque directement qu’ne peut pas créer de check avec .var.name puis créer une assert à partir de ça. Un autre possibilité serait de ne pas utiliser de .var.name pour les checks mais : Remarque : La fonction de check marche bien mais uniquement parce qu’l’doté de .var.name. Mais remarque alors que le message d’erreur n’est pas très clair… Pire : Dernière solution : faire des fonctions mixtes : Mais cette solution n’est pas viable à long terme car aimerait quand même pouvoir transformer en assert nos check (pour check_inf_2) et peut être que check_objet sera aussi appelé par une autre fonction et ne fournira alors à son tour aucune info sur les objets scannés.","code":"library(\"checkmate\") ## Warning: package 'checkmate' was built under R version 4.3.1 # Un check un peu random fait à la main check_inf_2 <- function(x, .var.name = checkmate::vname(x)) {     cond1 <- check_integerish(x, lower = 1, upper = 2)     return(ifelse(isTRUE(cond1), TRUE, paste(\"*\", .var.name, \":\", cond1))) }  assert_inf_2 <- makeAssertionFunction(check_inf_2)  print(check_inf_2(1, .var.name = \"Nom bizarre\")) ## [1] TRUE print(check_inf_2(3, .var.name = \"Nom bizarre\")) ## [1] \"* Nom bizarre : Element 1 is not <= 2\" assert_inf_2(1, .var.name = \"Nom bizarre\") ## Error in assert_inf_2(1, .var.name = \"Nom bizarre\"): argument 2 matches multiple formal arguments assert_inf_2(3, .var.name = \"Nom bizarre\") ## Error in assert_inf_2(3, .var.name = \"Nom bizarre\"): argument 2 matches multiple formal arguments # Un check sans .var.name (donc \"normal\") check_inf_2 <- function(x) {     return(check_integerish(x, lower = 1, upper = 2)) }  check_objet <- function(x) {     cond1 <- check_inf_2(x)     cond2 <- check_inf_2(length(x))          output <- c()     verif <- TRUE          if (!isTRUE(cond1)) {         output <- c(output, cond1)         verif <- FALSE     }          if (!isTRUE(cond2)) {         output <- c(output, cond2)         verif <- FALSE     }          output <- paste(\"*\", output, collapse = \"\\n\")          return(ifelse(verif, verif, output)) }  assert_objet <- makeAssertionFunction(check_objet) check_objet(4) ## [1] \"* Element 1 is not <= 2\" check_objet(c(1, 1, 2)) ## [1] \"* Element 1 is not <= 2\" assert_objet(4) ## Error in eval(expr, envir, enclos): Assertion on '4' failed: * Element 1 is not <= 2. assert_objet(c(1, 1, 2)) ## Error in eval(expr, envir, enclos): Assertion on 'c(1, 1, 2)' failed: * Element 1 is not <= 2. assert_objet(c(4, 1, 2)) ## Error in eval(expr, envir, enclos): Assertion on 'c(4, 1, 2)' failed: * Element 1 is not <= 2 ## * Element 1 is not <= 2. # Un check avec .var.name check_inf_2 <- function(x, .var.name = checkmate::vname(x)) {     cond1 <- check_integerish(x, lower = 1, upper = 2)     return(ifelse(isTRUE(cond1), TRUE, paste(\"*\", .var.name, \":\", cond1))) }  # Un check sns check_objet <- function(x) {     cond1 <- check_inf_2(x, .var.name = \"x\")     cond2 <- check_inf_2(length(x), .var.name = \"length(x)\")          output <- c()     verif <- TRUE          if (!isTRUE(cond1)) {         output <- c(output, cond1)         verif <- FALSE     }          if (!isTRUE(cond2)) {         output <- c(output, cond2)         verif <- FALSE     }          output <- paste(output, collapse = \"\\n\")          return(ifelse(verif, verif, output)) }  assert_objet <- makeAssertionFunction(check_objet) print(check_objet(c(1, 1, 2))) ## [1] \"* length(x) : Element 1 is not <= 2\" assert_objet(c(1, 1, 2)) ## Error in eval(expr, envir, enclos): Assertion on 'c(1, 1, 2)' failed: * length(x) : Element 1 is not <= 2. assert_objet(c(4, 1, 2)) ## Error in eval(expr, envir, enclos): Assertion on 'c(4, 1, 2)' failed: * x : Element 1 is not <= 2 ## * length(x) : Element 1 is not <= 2."},{"path":"https://tractortom.github.io/date4ts/news/index.html","id":"date4ts-011","dir":"Changelog","previous_headings":"","what":"date4ts 0.1.1","title":"date4ts 0.1.1","text":"notable changes project documented file. format based Keep Changelog, project adheres Semantic Versioning.","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/news/index.html","id":"added-0-1-1","dir":"Changelog","previous_headings":"Unreleased","what":"Added","title":"date4ts 0.1.1","text":"New logo","code":""},{"path":[]},{"path":"https://tractortom.github.io/date4ts/news/index.html","id":"added-0-1-1-1","dir":"Changelog","previous_headings":"0.1.0 - First release","what":"Added","title":"date4ts 0.1.1","text":"add function convert ts mts data.frame add user possibility allow mts assert_ts check_ts add function manage ts object date_ts object","code":""}]
